import requests
import random
import string
from multiprocessing import Process, Manager

HEADERS = {
    'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/110.0.0.0 Safari/537.36',
    'Accept-Language': 'en-US,en;q=0.9',
    'Connection': 'keep-alive',
}

CHARS = string.ascii_lowercase + string.digits


def generateusernames(count):
    """
    Generate a list of random 4-character usernames where the first character is always a letter.
    """
    usernames = []
    for  in range(count):
        first_char = random.choice(string.ascii_lowercase)  # Ensure the first character is a letter
        second_char = random.choice(CHARS)
        third_char = random.choice(CHARS)
        fourth_char = random.choice(CHARS)
        username = first_char + second_char + third_char + fourth_char
        usernames.append(username)
    return usernames



def load_proxies(filename):
    """
    Load proxies from a file and format them for use with requests.
    Each proxy in the file should be in the format: username:password@proxy_address:port
    """
    try:
        with open(filename, 'r') as file:
            proxies = [line.strip() for line in file if line.strip()]
            formatted_proxies = [{"http": f"http://{proxy}", "https": f"https://{proxy}"} for proxy in proxies]
            return formatted_proxies
    except FileNotFoundError:
        print("Proxy file not found. Running without proxies.")
        return []


def check_username_availability(queue, proxies):
    """
    Function to check the availability of 4-letter Xbox usernames.
    """
    while not queue.empty():
        username = queue.get()  # Fetch username from the queue
        try:
            # Select a random proxy from the proxy list
            proxy = random.choice(proxies) if proxies else None

            # Make the request
            response = requests.get(
                f'https://xboxgamertag.com/search/{username}',
                headers=HEADERS,
                proxies=proxy,
                timeout=10
            )

            # Check the response
            if response.status_code == 404:
                print(f'{username} : AVAILABLE')
                with open('4Lusernames.txt', 'a') as available_file:
                    available_file.write(username + '\n')
            else:
                print(f'{username} : TAKEN')

        except requests.RequestException as e:
            print(f'Error with {username}: {e}')
            continue


def main():
    """
    Main function to start the username checking process.
    """
    num_usernames = 1000  # Adjust as needed
    usernames = generate_usernames(num_usernames)
    proxies = load_proxies("https.txt")

    with Manager() as manager:
        username_queue = manager.Queue()

        for username in usernames:
            username_queue.put(username)

        processes = []
        num_processes = 10  # Adjust the number of processes as needed
        for _ in range(num_processes):
            process = Process(target=check_username_availability, args=(username_queue, proxies))
            process.start()
            processes.append(process)

        for process in processes:
            process.join()


if __name__ == "__main__":
    main()
